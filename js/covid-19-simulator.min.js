!(function (e) {
  var o = {};
  function r(t) {
    if (o[t]) return o[t].exports;
    var i = (o[t] = { i: t, l: !1, exports: {} });
    return e[t].call(i.exports, i, i.exports, r), (i.l = !0), i.exports;
  }
  (r.m = e),
    (r.c = o),
    (r.d = function (e, o, t) {
      r.o(e, o) || Object.defineProperty(e, o, { enumerable: !0, get: t });
    }),
    (r.r = function (e) {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(e, "__esModule", { value: !0 });
    }),
    (r.t = function (e, o) {
      if ((1 & o && (e = r(e)), 8 & o)) return e;
      if (4 & o && "object" == typeof e && e && e.__esModule) return e;
      var t = Object.create(null);
      if (
        (r.r(t),
        Object.defineProperty(t, "default", { enumerable: !0, value: e }),
        2 & o && "string" != typeof e)
      )
        for (var i in e)
          r.d(
            t,
            i,
            function (o) {
              return e[o];
            }.bind(null, i)
          );
      return t;
    }),
    (r.n = function (e) {
      var o =
        e && e.__esModule
          ? function () {
              return e.default;
            }
          : function () {
              return e;
            };
      return r.d(o, "a", o), o;
    }),
    (r.o = function (e, o) {
      return Object.prototype.hasOwnProperty.call(e, o);
    }),
    (r.p = ""),
    r((r.s = 7));
})([
  function (e, o, r) {
    "use strict";
    e.exports = function (e) {
      var o = [];
      return (
        (o.toString = function () {
          return this.map(function (o) {
            var r = (function (e, o) {
              var r = e[1] || "",
                t = e[3];
              if (!t) return r;
              if (o && "function" == typeof btoa) {
                var i =
                    ((a = t),
                    (l = btoa(unescape(encodeURIComponent(JSON.stringify(a))))),
                    (d =
                      "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(
                        l
                      )),
                    "/*# ".concat(d, " */")),
                  n = t.sources.map(function (e) {
                    return "/*# sourceURL="
                      .concat(t.sourceRoot || "")
                      .concat(e, " */");
                  });
                return [r].concat(n).concat([i]).join("\n");
              }
              var a, l, d;
              return [r].join("\n");
            })(o, e);
            return o[2] ? "@media ".concat(o[2], " {").concat(r, "}") : r;
          }).join("");
        }),
        (o.i = function (e, r, t) {
          "string" == typeof e && (e = [[null, e, ""]]);
          var i = {};
          if (t)
            for (var n = 0; n < this.length; n++) {
              var a = this[n][0];
              null != a && (i[a] = !0);
            }
          for (var l = 0; l < e.length; l++) {
            var d = [].concat(e[l]);
            (t && i[d[0]]) ||
              (r &&
                (d[2]
                  ? (d[2] = "".concat(r, " and ").concat(d[2]))
                  : (d[2] = r)),
              o.push(d));
          }
        }),
        o
      );
    };
  },
  function (e, o, r) {
    var t,
      i,
      n = {},
      a =
        ((t = function () {
          return window && document && document.all && !window.atob;
        }),
        function () {
          return void 0 === i && (i = t.apply(this, arguments)), i;
        }),
      l = function (e, o) {
        return o ? o.querySelector(e) : document.querySelector(e);
      },
      d = (function (e) {
        var o = {};
        return function (e, r) {
          if ("function" == typeof e) return e();
          if (void 0 === o[e]) {
            var t = l.call(this, e, r);
            if (
              window.HTMLIFrameElement &&
              t instanceof window.HTMLIFrameElement
            )
              try {
                t = t.contentDocument.head;
              } catch (e) {
                t = null;
              }
            o[e] = t;
          }
          return o[e];
        };
      })(),
      c = null,
      s = 0,
      m = [],
      f = r(4);
    function p(e, o) {
      for (var r = 0; r < e.length; r++) {
        var t = e[r],
          i = n[t.id];
        if (i) {
          i.refs++;
          for (var a = 0; a < i.parts.length; a++) i.parts[a](t.parts[a]);
          for (; a < t.parts.length; a++) i.parts.push(w(t.parts[a], o));
        } else {
          var l = [];
          for (a = 0; a < t.parts.length; a++) l.push(w(t.parts[a], o));
          n[t.id] = { id: t.id, refs: 1, parts: l };
        }
      }
    }
    function b(e, o) {
      for (var r = [], t = {}, i = 0; i < e.length; i++) {
        var n = e[i],
          a = o.base ? n[0] + o.base : n[0],
          l = { css: n[1], media: n[2], sourceMap: n[3] };
        t[a] ? t[a].parts.push(l) : r.push((t[a] = { id: a, parts: [l] }));
      }
      return r;
    }
    function u(e, o) {
      var r = d(e.insertInto);
      if (!r)
        throw new Error(
          "Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid."
        );
      var t = m[m.length - 1];
      if ("top" === e.insertAt)
        t
          ? t.nextSibling
            ? r.insertBefore(o, t.nextSibling)
            : r.appendChild(o)
          : r.insertBefore(o, r.firstChild),
          m.push(o);
      else if ("bottom" === e.insertAt) r.appendChild(o);
      else {
        if ("object" != typeof e.insertAt || !e.insertAt.before)
          throw new Error(
            "[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n"
          );
        var i = d(e.insertAt.before, r);
        r.insertBefore(o, i);
      }
    }
    function h(e) {
      if (null === e.parentNode) return !1;
      e.parentNode.removeChild(e);
      var o = m.indexOf(e);
      o >= 0 && m.splice(o, 1);
    }
    function g(e) {
      var o = document.createElement("style");
      if (
        (void 0 === e.attrs.type && (e.attrs.type = "text/css"),
        void 0 === e.attrs.nonce)
      ) {
        var t = (function () {
          0;
          return r.nc;
        })();
        t && (e.attrs.nonce = t);
      }
      return x(o, e.attrs), u(e, o), o;
    }
    function x(e, o) {
      Object.keys(o).forEach(function (r) {
        e.setAttribute(r, o[r]);
      });
    }
    function w(e, o) {
      var r, t, i, n;
      if (o.transform && e.css) {
        if (
          !(n =
            "function" == typeof o.transform
              ? o.transform(e.css)
              : o.transform.default(e.css))
        )
          return function () {};
        e.css = n;
      }
      if (o.singleton) {
        var a = s++;
        (r = c || (c = g(o))),
          (t = k.bind(null, r, a, !1)),
          (i = k.bind(null, r, a, !0));
      } else
        e.sourceMap &&
        "function" == typeof URL &&
        "function" == typeof URL.createObjectURL &&
        "function" == typeof URL.revokeObjectURL &&
        "function" == typeof Blob &&
        "function" == typeof btoa
          ? ((r = (function (e) {
              var o = document.createElement("link");
              return (
                void 0 === e.attrs.type && (e.attrs.type = "text/css"),
                (e.attrs.rel = "stylesheet"),
                x(o, e.attrs),
                u(e, o),
                o
              );
            })(o)),
            (t = M.bind(null, r, o)),
            (i = function () {
              h(r), r.href && URL.revokeObjectURL(r.href);
            }))
          : ((r = g(o)),
            (t = z.bind(null, r)),
            (i = function () {
              h(r);
            }));
      return (
        t(e),
        function (o) {
          if (o) {
            if (
              o.css === e.css &&
              o.media === e.media &&
              o.sourceMap === e.sourceMap
            )
              return;
            t((e = o));
          } else i();
        }
      );
    }
    e.exports = function (e, o) {
      if ("undefined" != typeof DEBUG && DEBUG && "object" != typeof document)
        throw new Error(
          "The style-loader cannot be used in a non-browser environment"
        );
      ((o = o || {}).attrs = "object" == typeof o.attrs ? o.attrs : {}),
        o.singleton || "boolean" == typeof o.singleton || (o.singleton = a()),
        o.insertInto || (o.insertInto = "head"),
        o.insertAt || (o.insertAt = "bottom");
      var r = b(e, o);
      return (
        p(r, o),
        function (e) {
          for (var t = [], i = 0; i < r.length; i++) {
            var a = r[i];
            (l = n[a.id]).refs--, t.push(l);
          }
          e && p(b(e, o), o);
          for (i = 0; i < t.length; i++) {
            var l;
            if (0 === (l = t[i]).refs) {
              for (var d = 0; d < l.parts.length; d++) l.parts[d]();
              delete n[l.id];
            }
          }
        }
      );
    };
    var v,
      y =
        ((v = []),
        function (e, o) {
          return (v[e] = o), v.filter(Boolean).join("\n");
        });
    function k(e, o, r, t) {
      var i = r ? "" : t.css;
      if (e.styleSheet) e.styleSheet.cssText = y(o, i);
      else {
        var n = document.createTextNode(i),
          a = e.childNodes;
        a[o] && e.removeChild(a[o]),
          a.length ? e.insertBefore(n, a[o]) : e.appendChild(n);
      }
    }
    function z(e, o) {
      var r = o.css,
        t = o.media;
      if ((t && e.setAttribute("media", t), e.styleSheet))
        e.styleSheet.cssText = r;
      else {
        for (; e.firstChild; ) e.removeChild(e.firstChild);
        e.appendChild(document.createTextNode(r));
      }
    }
    function M(e, o, r) {
      var t = r.css,
        i = r.sourceMap,
        n = void 0 === o.convertToAbsoluteUrls && i;
      (o.convertToAbsoluteUrls || n) && (t = f(t)),
        i &&
          (t +=
            "\n/*# sourceMappingURL=data:application/json;base64," +
            btoa(unescape(encodeURIComponent(JSON.stringify(i)))) +
            " */");
      var a = new Blob([t], { type: "text/css" }),
        l = e.href;
      (e.href = URL.createObjectURL(a)), l && URL.revokeObjectURL(l);
    }
  },
  function (e, o, r) {
    var t = r(3);
    "string" == typeof t && (t = [[e.i, t, ""]]);
    var i = { hmr: !0, transform: void 0, insertInto: void 0 };
    r(1)(t, i);
    t.locals && (e.exports = t.locals);
  },
  function (e, o, r) {},
  function (e, o) {
    e.exports = function (e) {
      var o = "undefined" != typeof window && window.location;
      if (!o) throw new Error("fixUrls requires window.location");
      if (!e || "string" != typeof e) return e;
      var r = o.protocol + "//" + o.host,
        t = r + o.pathname.replace(/\/[^\/]*$/, "/");
      return e.replace(
        /url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,
        function (e, o) {
          var i,
            n = o
              .trim()
              .replace(/^"(.*)"$/, function (e, o) {
                return o;
              })
              .replace(/^'(.*)'$/, function (e, o) {
                return o;
              });
          return /^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(n)
            ? e
            : ((i =
                0 === n.indexOf("//")
                  ? n
                  : 0 === n.indexOf("/")
                  ? r + n
                  : t + n.replace(/^\.\//, "")),
              "url(" + JSON.stringify(i) + ")");
        }
      );
    };
  },
  function (e, o, r) {
    var t = r(6);
    "string" == typeof t && (t = [[e.i, t, ""]]);
    var i = { hmr: !0, transform: void 0, insertInto: void 0 };
    r(1)(t, i);
    t.locals && (e.exports = t.locals);
  },
  function (e, o, r) {
    (o = r(0)(!1)).push([
      e.i,
      '/*! Spectre.css Icons v0.5.8 | MIT License | github.com/picturepan2/spectre */.icon{box-sizing:border-box;display:inline-block;font-size:inherit;font-style:normal;height:1em;position:relative;text-indent:-9999px;vertical-align:middle;width:1em}.icon::after,.icon::before{content:"";display:block;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%)}.icon.icon-2x{font-size:1.6rem}.icon.icon-3x{font-size:2.4rem}.icon.icon-4x{font-size:3.2rem}.accordion .icon,.btn .icon,.menu .icon,.toast .icon{vertical-align:-10%}.btn-lg .icon{vertical-align:-15%}.icon-arrow-down::before,.icon-arrow-left::before,.icon-arrow-right::before,.icon-arrow-up::before,.icon-back::before,.icon-downward::before,.icon-forward::before,.icon-upward::before{border:.05rem solid currentColor;border-bottom:0;border-right:0;height:.65em;width:.65em}.icon-arrow-down::before{transform:translate(-50%,-75%) rotate(225deg)}.icon-arrow-left::before{transform:translate(-25%,-50%) rotate(-45deg)}.icon-arrow-right::before{transform:translate(-75%,-50%) rotate(135deg)}.icon-arrow-up::before{transform:translate(-50%,-25%) rotate(45deg)}.icon-back::after,.icon-forward::after{background:currentColor;height:.05rem;width:.8em}.icon-downward::after,.icon-upward::after{background:currentColor;height:.8em;width:.05rem}.icon-back::after{left:55%}.icon-back::before{transform:translate(-50%,-50%) rotate(-45deg)}.icon-downward::after{top:45%}.icon-downward::before{transform:translate(-50%,-50%) rotate(-135deg)}.icon-forward::after{left:45%}.icon-forward::before{transform:translate(-50%,-50%) rotate(135deg)}.icon-upward::after{top:55%}.icon-upward::before{transform:translate(-50%,-50%) rotate(45deg)}.icon-caret::before{border-left:.3em solid transparent;border-right:.3em solid transparent;border-top:.3em solid currentColor;height:0;transform:translate(-50%,-25%);width:0}.icon-menu::before{background:currentColor;box-shadow:0 -.35em,0 .35em;height:.05rem;width:100%}.icon-apps::before{background:currentColor;box-shadow:-.35em -.35em,-.35em 0,-.35em .35em,0 -.35em,0 .35em,.35em -.35em,.35em 0,.35em .35em;height:3px;width:3px}.icon-resize-horiz::after,.icon-resize-horiz::before,.icon-resize-vert::after,.icon-resize-vert::before{border:.05rem solid currentColor;border-bottom:0;border-right:0;height:.45em;width:.45em}.icon-resize-horiz::before,.icon-resize-vert::before{transform:translate(-50%,-90%) rotate(45deg)}.icon-resize-horiz::after,.icon-resize-vert::after{transform:translate(-50%,-10%) rotate(225deg)}.icon-resize-horiz::before{transform:translate(-90%,-50%) rotate(-45deg)}.icon-resize-horiz::after{transform:translate(-10%,-50%) rotate(135deg)}.icon-more-horiz::before,.icon-more-vert::before{background:currentColor;border-radius:50%;box-shadow:-.4em 0,.4em 0;height:3px;width:3px}.icon-more-vert::before{box-shadow:0 -.4em,0 .4em}.icon-cross::before,.icon-minus::before,.icon-plus::before{background:currentColor;height:.05rem;width:100%}.icon-cross::after,.icon-plus::after{background:currentColor;height:100%;width:.05rem}.icon-cross::before{width:100%}.icon-cross::after{height:100%}.icon-cross::after,.icon-cross::before{transform:translate(-50%,-50%) rotate(45deg)}.icon-check::before{border:.05rem solid currentColor;border-right:0;border-top:0;height:.5em;transform:translate(-50%,-75%) rotate(-45deg);width:.9em}.icon-stop{border:.05rem solid currentColor;border-radius:50%}.icon-stop::before{background:currentColor;height:.05rem;transform:translate(-50%,-50%) rotate(45deg);width:1em}.icon-shutdown{border:.05rem solid currentColor;border-radius:50%;border-top-color:transparent}.icon-shutdown::before{background:currentColor;content:"";height:.5em;top:.1em;width:.05rem}.icon-refresh::before{border:.05rem solid currentColor;border-radius:50%;border-right-color:transparent;height:1em;width:1em}.icon-refresh::after{border:.2em solid currentColor;border-left-color:transparent;border-top-color:transparent;height:0;left:80%;top:20%;width:0}.icon-search::before{border:.05rem solid currentColor;border-radius:50%;height:.75em;left:5%;top:5%;transform:translate(0,0) rotate(45deg);width:.75em}.icon-search::after{background:currentColor;height:.05rem;left:80%;top:80%;transform:translate(-50%,-50%) rotate(45deg);width:.4em}.icon-edit::before{border:.05rem solid currentColor;height:.4em;transform:translate(-40%,-60%) rotate(-45deg);width:.85em}.icon-edit::after{border:.15em solid currentColor;border-right-color:transparent;border-top-color:transparent;height:0;left:5%;top:95%;transform:translate(0,-100%);width:0}.icon-delete::before{border:.05rem solid currentColor;border-bottom-left-radius:.15rem;border-bottom-right-radius:.15rem;border-top:0;height:.75em;top:60%;width:.75em}.icon-delete::after{background:currentColor;box-shadow:-.25em .2em,.25em .2em;height:.05rem;top:.025rem;width:.5em}.icon-share{border:.05rem solid currentColor;border-radius:.15rem;border-right:0;border-top:0}.icon-share::before{border:.05rem solid currentColor;border-left:0;border-top:0;height:.4em;left:100%;top:.25em;transform:translate(-125%,-50%) rotate(-45deg);width:.4em}.icon-share::after{border:.05rem solid currentColor;border-bottom:0;border-radius:75% 0;border-right:0;height:.5em;width:.6em}.icon-flag::before{background:currentColor;height:1em;left:15%;width:.05rem}.icon-flag::after{border:.05rem solid currentColor;border-bottom-right-radius:.15rem;border-left:0;border-top-right-radius:.15rem;height:.65em;left:60%;top:35%;width:.8em}.icon-bookmark::before{border:.05rem solid currentColor;border-bottom:0;border-top-left-radius:.15rem;border-top-right-radius:.15rem;height:.9em;width:.8em}.icon-bookmark::after{border:.05rem solid currentColor;border-bottom:0;border-left:0;border-radius:.15rem;height:.5em;transform:translate(-50%,35%) rotate(-45deg) skew(15deg,15deg);width:.5em}.icon-download,.icon-upload{border-bottom:.05rem solid currentColor}.icon-download::before,.icon-upload::before{border:.05rem solid currentColor;border-bottom:0;border-right:0;height:.5em;transform:translate(-50%,-60%) rotate(-135deg);width:.5em}.icon-download::after,.icon-upload::after{background:currentColor;height:.6em;top:40%;width:.05rem}.icon-upload::before{transform:translate(-50%,-60%) rotate(45deg)}.icon-upload::after{top:50%}.icon-copy::before{border:.05rem solid currentColor;border-bottom:0;border-radius:.15rem;border-right:0;height:.8em;left:40%;top:35%;width:.8em}.icon-copy::after{border:.05rem solid currentColor;border-radius:.15rem;height:.8em;left:60%;top:60%;width:.8em}.icon-time{border:.05rem solid currentColor;border-radius:50%}.icon-time::before{background:currentColor;height:.4em;transform:translate(-50%,-75%);width:.05rem}.icon-time::after{background:currentColor;height:.3em;transform:translate(-50%,-75%) rotate(90deg);transform-origin:50% 90%;width:.05rem}.icon-mail::before{border:.05rem solid currentColor;border-radius:.15rem;height:.8em;width:1em}.icon-mail::after{border:.05rem solid currentColor;border-right:0;border-top:0;height:.5em;transform:translate(-50%,-90%) rotate(-45deg) skew(10deg,10deg);width:.5em}.icon-people::before{border:.05rem solid currentColor;border-radius:50%;height:.45em;top:25%;width:.45em}.icon-people::after{border:.05rem solid currentColor;border-radius:50% 50% 0 0;height:.4em;top:75%;width:.9em}.icon-message{border:.05rem solid currentColor;border-bottom:0;border-radius:.15rem;border-right:0}.icon-message::before{border:.05rem solid currentColor;border-bottom-right-radius:.15rem;border-left:0;border-top:0;height:.8em;left:65%;top:40%;width:.7em}.icon-message::after{background:currentColor;border-radius:.15rem;height:.3em;left:10%;top:100%;transform:translate(0,-90%) rotate(45deg);width:.05rem}.icon-photo{border:.05rem solid currentColor;border-radius:.15rem}.icon-photo::before{border:.05rem solid currentColor;border-radius:50%;height:.25em;left:35%;top:35%;width:.25em}.icon-photo::after{border:.05rem solid currentColor;border-bottom:0;border-left:0;height:.5em;left:60%;transform:translate(-50%,25%) rotate(-45deg);width:.5em}.icon-link::after,.icon-link::before{border:.05rem solid currentColor;border-radius:5em 0 0 5em;border-right:0;height:.5em;width:.75em}.icon-link::before{transform:translate(-70%,-45%) rotate(-45deg)}.icon-link::after{transform:translate(-30%,-55%) rotate(135deg)}.icon-location::before{border:.05rem solid currentColor;border-radius:50% 50% 50% 0;height:.8em;transform:translate(-50%,-60%) rotate(-45deg);width:.8em}.icon-location::after{border:.05rem solid currentColor;border-radius:50%;height:.2em;transform:translate(-50%,-80%);width:.2em}.icon-emoji{border:.05rem solid currentColor;border-radius:50%}.icon-emoji::before{border-radius:50%;box-shadow:-.17em -.1em,.17em -.1em;height:.15em;width:.15em}.icon-emoji::after{border:.05rem solid currentColor;border-bottom-color:transparent;border-radius:50%;border-right-color:transparent;height:.5em;transform:translate(-50%,-40%) rotate(-135deg);width:.5em}',
      "",
    ]),
      (e.exports = o);
  },
  function (e, o, r) {
    "use strict";
    r.r(o);
    var t = {
        name: "Default Simulation",
        populationSize: 1e3,
        workerPercent: 0.7,
        commercialAreas: 20,
        socialAreas: 30,
        visitProbability: 2e-4,
        socialProbability: 4e-4,
        mapSize: [30, 30],
        startManifest: 2,
        manifestUpTo: 6,
        spreadProbability: 0.015,
        recoveryTime: 4,
        mortality: 0.09,
        reinfectProbability: 0.001,
      },
      i = {
        0: "rgba(138, 255, 105, 0.6)",
        1: "rgba(105, 170, 255, 0.6)",
        2: "rgba(255,  82, 235, 0.6)",
        3: "rgba(125, 125, 125, 0.6)",
        4: "rgba(255, 168, 105, 0.6)",
      },
      n = [
        { name: "House", color: i[0] },
        { name: "Commercial / Work", color: i[1] },
        { name: "Hospital", color: i[2] },
        { name: "Social Area / Shop", color: i[4] },
      ];
    function a(e) {
      var o = Object.assign({}, t, e),
        r = o.name,
        n = o.populationSize,
        a = o.workerPercent,
        l = o.commercialAreas,
        d = o.socialAreas,
        c = o.visitProbability,
        s = o.socialProbability,
        m = o.startManifest,
        f = o.manifestUpTo,
        p = o.spreadProbability,
        b = o.mortality,
        u = o.recoveryTime,
        h = o.reinfectProbability,
        g = Math.max(Math.floor(Math.sqrt(n / 2 + l + d)), 30);
      o.mapSize = [g, g];
      var x = o.mapSize,
        w = 340 / x[0],
        v = {},
        y = [],
        k = [],
        z = [],
        M = [],
        C = !1,
        S = 0,
        j = 0,
        T = 0,
        O = {
          infected: new Array(340).fill(0),
          hospitalized: new Array(340).fill(0),
          dead: new Array(340).fill(0),
          days: new Array(340).fill(0),
        };
      function P(e, o) {
        O[e].splice(0, 1), O[e].push(o);
      }
      var A = document.createElement("span");
      (A.style =
        "display: inline-block; padding: 10px; border: 1px solid #000; margin: 5px;"),
        (A.innerHTML = '<h5 style="text-align: center">'.concat(r, "</h5>"));
      var L = document.createElement("canvas");
      L.setAttribute("width", 340),
        L.setAttribute("height", 430),
        A.appendChild(L);
      var U = document.createElement("button");
      (U.innerText = "Infect"),
        (U.className = "btn btn-small btn-error"),
        (U.onclick = function () {
          var e = M.filter(function (e) {
            return !e.infected;
          });
          W(e[Math.floor(Math.random() * e.length)]);
        });
      var E = document.createElement("div");
      function H(e) {
        for (var o; !o; ) {
          var r = Math.floor(1 + Math.floor(Math.random() * (x[0] - 1))),
            t = Math.floor(1 + Math.floor(Math.random() * (x[1] - 1))),
            i = "".concat(r, "-").concat(t);
          v[i] ||
            ((o = Object.assign({}, e, { x: r * w, y: t * w })), (v[i] = o));
        }
        return o;
      }
      (E.className = "sim-control"),
        (E.style = "margin-top: 10px"),
        (E.innerHTML =
          '\n    <div class="form-group" style="display: inline-block">\n        <label class="form-switch">\n            <input type="checkbox"  />\n            <i class="form-icon"></i> Force Isolation\n        </label>\n    </div>'),
        E.appendChild(U),
        (E.querySelector("input").onchange = function (e) {
          C = e.target.checked;
        }),
        A.appendChild(E);
      for (var R = H({ type: 2 }), I = 0; I < l; I++) {
        var B = H({ type: 1 });
        k.push(B);
      }
      for (var N = 0; N < d; N++) {
        var F = H({ type: 4 });
        z.push(F);
      }
      for (var q = 0; q < n; q++) {
        var D = {},
          Y = y.filter(function (e) {
            return e.size < 4;
          }),
          G = Y[Math.floor(Math.random() * Y.length)];
        (!y.length || Math.random() < 0.4 || !G) &&
          ((G = H({ type: 0, size: 0 })), y.push(G)),
          (G.size += 1),
          Object.assign(D, {
            location: 0,
            offsetX: 0,
            offsetY: 0,
            x: G.x,
            y: G.y,
            currentTarget: G,
            destination: G,
            returnTime: 1320,
            assignedHome: G,
          }),
          M.push(D);
      }
      for (var _ = 0; _ < n * a; _++)
        (M[_].destination = k[Math.floor(Math.random() * k.length)]),
          (M[_].destinationTime =
            60 * (Math.floor(4 * Math.random()) + 6) +
            Math.floor(30 * Math.random())),
          (M[_].workReturnTime = M[_].returnTime = M[_].destinationTime + 480);
      var V = [].concat(k, y, z, [R]),
        $ = document.createElement("canvas");
      function J(e, o, r, t, i, a, l) {
        var d,
          c,
          s =
            arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0;
        e.strokeStyle = "rgba("
          .concat(r, ", ")
          .concat(t, ", ")
          .concat(i, ", ")
          .concat(a, ")");
        for (var m = 0; m < o.length; m++)
          (c = o[m]),
            (d = Math.floor((80 * c) / n)),
            e.beginPath(),
            e.moveTo(m, 430),
            e.lineTo(m, 430 - d),
            e.lineTo(m, 430 - d + 2),
            e.lineTo(m, 430 - d),
            e.stroke();
        e.beginPath(),
          e.moveTo(0, 430 - d),
          e.lineTo(340, 430 - d),
          e.stroke(),
          l &&
            ((e.fillStyle = "#000"),
            (e.font = "10px Lato"),
            e.fillText("".concat(l).concat(c), s, 430 - d - 2));
      }
      function W(e) {
        (!e.wasInfected || Math.random() < h) &&
          (j++,
          (e.infected = !0),
          (e.timeUntilManifestation =
            24 * (m + Math.floor(Math.random() * f)) * 60),
          (e.willDie = Math.random() < b),
          (e.recover = 24 * (u + Math.floor(u * Math.random() * 0.3)) * 60));
      }
      return (
        ($.width = L.width),
        ($.height = L.height),
        V.forEach(function (e) {
          !(function (e, o, r) {
            var t = o.x,
              n = o.y,
              a = o.type;
            (e.fillStyle = i[a]),
              e.fillRect(t - r / 2, n - r / 2, r, r),
              (e.strokeStyle = "rgba(0,0,0,0.3)"),
              e.strokeRect(t - r / 2, n - r / 2, r, r),
              e.stroke();
          })($.getContext("2d"), e, w);
        }),
        W(M[0]),
        {
          wrapper: A,
          render: function () {
            var e = L.getContext("2d");
            e.clearRect(0, 0, 340, 430),
              e.drawImage($, 0, 0),
              M.forEach(function (o) {
                var r = o.x,
                  t = o.y,
                  i = o.infected;
                if (!o.dead) {
                  e.fillStyle = i ? "rgb(255,0,0)" : "rgba(25,25,25,1)";
                  var n = r,
                    a = t;
                  e.beginPath();
                  var l = i ? -2 : -1,
                    d = i ? -4 : -2;
                  e.fillRect(n - l, a - l, d, d), e.stroke();
                }
              }),
              J(e, O.infected, 255, 0, 0, 0.35, "Infected: ", 0),
              J(e, O.hospitalized, 0, 136, 255, 0.35, "Hospitalised: ", 60),
              J(e, O.dead, 0, 0, 0, 0.6, "Fatalities: ", 140),
              J(e, O.days, 0, 0, 0, 0.5);
          },
          tick: function (e) {
            M.forEach(function (o, r) {
              var t = o.destination,
                i = o.destinationTime,
                n = o.returnTime,
                a = o.assignedHome;
              if (!o.dead) {
                if (o.currentTarget != R && !C)
                  if (i === e)
                    t &&
                      o.currentTarget === a &&
                      i === e &&
                      (o.currentTarget = t);
                  else if (o.currentTarget !== a && n === e)
                    o.currentTarget = a;
                  else if (!o.social && o.currentTarget === a) {
                    if (Math.random() < c) {
                      var l = y[Math.floor(y.length * Math.random())];
                      l != a &&
                        ((o.social = !0),
                        (o.returnTime = e + 60 * Math.floor(3 * Math.random())),
                        (o.currentTarget = l));
                    } else if (Math.random() < s) {
                      o.social = !0;
                      var d = z[Math.floor(z.length * Math.random())];
                      (o.returnTime = e + 10 * Math.floor(30 * Math.random())),
                        (o.currentTarget = d);
                    }
                    o.returnTime > 1438 && (o.returnTime = 1438);
                  }
                if (o.infected) {
                  if (
                    o.timeUntilManifestation > 0 &&
                    (o.timeUntilManifestation--, Math.random() < p)
                  ) {
                    var m = M.filter(function (e) {
                      if (e == o || e.infected) return !1;
                      var r = (o.x - e.x) * (o.x - e.x),
                        t = (o.y - e.y) * (o.y - e.y);
                      return Math.sqrt(r + t) < 4;
                    });
                    m &&
                      m.length &&
                      m.forEach(function (e) {
                        Math.random() < p && W(e);
                      });
                  }
                  0 == o.timeUntilManifestation &&
                    ((o.timeUntilManifestation = -1),
                    o.willDie
                      ? ((o.dead = !0), S++, j--, o.currentTarget == R && T--)
                      : ((o.currentTarget = R), T++)),
                    o.currentTarget === R && o.recover--,
                    0 == o.recover &&
                      ((o.infected = !1),
                      (o.wasInfected = !0),
                      j--,
                      T--,
                      (o.currentTarget = o.assignedHome));
                }
                var f = o.currentTarget.x - o.x,
                  b = Math.max(Math.min(w, f), 1),
                  u = o.currentTarget.y - o.y,
                  h = Math.max(Math.min(w, u), 1);
                (o.x +=
                  Math.random() < 0.95
                    ? Math.floor((Math.sign(f) * b) / 2)
                    : Math.floor(-b / 2 + Math.random() * b)),
                  (o.y +=
                    Math.random() < 0.95
                      ? Math.floor((Math.sign(u) * h) / 2)
                      : Math.floor(-h / 2 + Math.random() * h));
              }
            }),
              e % 60 == 0 &&
                (P("infected", j),
                P("dead", S),
                P("hospitalized", T),
                P("days", 0 === e ? n : 0));
          },
          day: function () {
            M.forEach(function (e) {
              (e.social = !1),
                e.currentTarget !== R &&
                  ((e.currentTarget = e.assignedHome),
                  (e.returnTime = e.workReturnTime));
            });
          },
        }
      );
    }
    r(2), r(5);
    function l(e, o) {
      var r = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var t = Object.getOwnPropertySymbols(e);
        o &&
          (t = t.filter(function (o) {
            return Object.getOwnPropertyDescriptor(e, o).enumerable;
          })),
          r.push.apply(r, t);
      }
      return r;
    }
    function d(e) {
      for (var o = 1; o < arguments.length; o++) {
        var r = null != arguments[o] ? arguments[o] : {};
        o % 2
          ? l(Object(r), !0).forEach(function (o) {
              c(e, o, r[o]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
          : l(Object(r)).forEach(function (o) {
              Object.defineProperty(
                e,
                o,
                Object.getOwnPropertyDescriptor(r, o)
              );
            });
      }
      return e;
    }
    function c(e, o, r) {
      return (
        o in e
          ? Object.defineProperty(e, o, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
          : (e[o] = r),
        e
      );
    }
    var s = [
        { name: "Default", value: d({}, t) },
        {
          name: "Large Size City",
          value: {
            name: "Large Size City",
            populationSize: 1e4,
            commercialAreas: 250,
            socialAreas: 300,
          },
        },
        {
          name: "Medium Size City",
          value: {
            name: "Medium Size City",
            populationSize: 5e3,
            commercialAreas: 120,
            socialAreas: 150,
          },
        },
        {
          name: "Small Size City",
          value: {
            name: "Small Size City",
            populationSize: 1e3,
            commercialAreas: 60,
            socialAreas: 80,
          },
        },
        {
          name: "Work From Home",
          value: {
            name: "Work From Home",
            commercialAreas: 0,
            workerPercent: 0,
          },
        },
        {
          name: "Isolation: Visits Disalowed / Shopping Allowed",
          value: {
            name: "Visits Disalowed / Shopping Allowed",
            visitProbability: 0,
            socialProbability: t.socialProbability,
            workerPercent: 0,
          },
        },
        {
          name: "Isolation: Visits Allowed / Shopping Disalowed",
          value: {
            name: "Visits Allowed / Shopping Disalowed",
            visitProbability: t.visitProbability,
            socialProbability: 0,
            workerPercent: 0,
          },
        },
        {
          name: "Medium Size City / Large Office Buildings",
          value: {
            name: "Medium Size City / Large Office Buildings",
            populationSize: 5e3,
            commercialAreas: 10,
            socialAreas: 150,
            workerPercent: 0.8,
          },
        },
        {
          name: "Medium Size City / Small Office Buildings",
          value: {
            name: "Medium Size City / Small Office Buildings",
            populationSize: 5e3,
            commercialAreas: 400,
            socialAreas: 150,
            workerPercent: 0.8,
          },
        },
      ],
      m = [],
      f = {
        startManifest: "Manifestation Start (day)",
        manifestUpTo: "Manifestation Delay (days)",
        recoveryTime: "Recovery Time (days)",
      },
      p = 0,
      b = 0,
      u = !1,
      h = 1,
      g = h,
      x = 300,
      w = document.createElement("span");
    w.className = "chip";
    var v = [
      "speed",
      "slower",
      "faster",
      "stop",
      "frameskip",
      "fsinc",
      "fsdec",
      "setup",
      "virus-setup",
      "simulations",
      "addsimulation",
      "header",
      "simulation-card",
      "legend",
    ].reduce(function (e, o) {
      return (e[o] = document.querySelector("#".concat(o))), e;
    }, {});
    function y(e, o, r) {
      var t =
        arguments.length > 3 && void 0 !== arguments[3]
          ? arguments[3]
          : "col-6";
      o.forEach(function (o) {
        var i = f[o];
        if (!i) {
          var n = o.replace(/([A-Z])/g, " $1");
          i = n.charAt(0).toUpperCase() + n.slice(1);
        }
        var a =
            '<div class="form-group">\n            <label class="form-label" for="'
              .concat(o, '">')
              .concat(
                i,
                '</label>\n            <input class="form-input" value="'
              )
              .concat(e[o], '" id="')
              .concat(o, '" type="')
              .concat(
                "string" == typeof e[o] ? "text" : "number",
                '" min="0">        \n          </div>\n        '
              ),
          l = document.createElement("div");
        (l.className = "column " + t),
          (l.innerHTML = a),
          v[r].appendChild(l),
          (document.querySelector("#".concat(o)).onchange = function (r) {
            var t = r.target.value;
            if ("string" == typeof e[o]) e[o] = t;
            else {
              var i = parseFloat(t);
              e[o] = i;
            }
            console.log(t, e[o]);
          });
      });
    }
    n.forEach(function (e) {
      v.legend.innerHTML +=
        '\n        <div class="chip">\n            <figure class="avatar avatar-sm" style="border: 1px solid #000; background-color: '
          .concat(e.color, '"></figure>')
          .concat(e.name, "\n        </div>\n    ");
    }),
      v.header.appendChild(w);
    var k = Object.assign({}, t);
    y(
      k,
      [
        "startManifest",
        "manifestUpTo",
        "spreadProbability",
        "recoveryTime",
        "mortality",
        "reinfectProbability",
      ],
      "virus-setup"
    ),
      y(
        k,
        [
          "populationSize",
          "workerPercent",
          "commercialAreas",
          "socialAreas",
          "visitProbability",
          "socialProbability",
        ],
        "setup"
      ),
      y(k, ["name"], "simulation-card", "col-12");
    var z =
        '<div class="column col-12">\n    <div class="form-group">\n        <label class="form-label" for="templates">Select from template</label>\n        <select class="form-select" placeholder="Template" id="templates">\n            <option>Select template</option>\n            '.concat(
          s.map(function (e, o) {
            return '<option value="'
              .concat(o, '" >')
              .concat(e.name, "</option>");
          }),
          '\n        </select>\n    </div>\n    <div class="form-group" style="display: inline-block">\n        <label class="form-switch">\n            <input type="checkbox"  id="overwrite"/>\n            <i class="form-icon"></i> Overwrite my current settings\n        </label>\n    </div>\n</div>'
        ),
      M = document.querySelector("#simulation-card"),
      C = document.createElement("span");
    (C.innerHTML += z), M.appendChild(C);
    var S = M.querySelector("#templates"),
      j = M.querySelector("#overwrite");
    function T() {
      console.log(k);
      var e = a(k);
      v.simulations.appendChild(e.wrapper);
      var o = e.wrapper.querySelector(".sim-control"),
        r = document.createElement("button");
      (r.className = "btn btn-small btn-error"),
        (r.innerHTML = '<i class="icon icon-shutdown"></i> Remove Simulation'),
        (r.style = "float: right;"),
        (r.onclick = function () {
          var o = m.indexOf(e);
          m.splice(o, 1), v.simulations.removeChild(e.wrapper);
        }),
        o.appendChild(r),
        m.push(e);
    }
    (v.fsinc.onclick = function () {
      p++, (v.frameskip.innerHTML = "Frameskip: ".concat(p));
    }),
      (v.fsdec.onclick = function () {
        --p < 0 && (p = 0), (v.frameskip.innerHTML = "Frameskip: ".concat(p));
      }),
      (v.stop.onclick = function (e) {
        (h = -1 === h ? 1 : -1),
          (v.stop.innerHTML = -1 !== h ? "Pause" : "Start");
      }),
      (v.faster.onclick = function (e) {
        h > 0 && h--;
      }),
      (v.slower.onclick = function (e) {
        h++;
      }),
      (S.onchange = function (e) {
        var o = e.target.value;
        if ("Select template" !== o) {
          u && (k = d({}, t));
          var r = parseInt(o),
            i = s[r].value;
          Object.keys(i).forEach(function (e) {
            (document.querySelector("#".concat(e)).value = i[e]), (k[e] = i[e]);
          });
        }
      }),
      (j.onchange = function (e) {
        u = e.target.checked;
      }),
      (v.addsimulation.onclick = function (e) {
        return T();
      }),
      T(),
      Object.assign(k, s[4].value),
      (k.name += " - Visits/Shopping Allowed"),
      T(),
      Object.assign(k, t),
      window.setInterval(function () {
        if (--g < 1 && -1 !== h) {
          (g = h),
            m.forEach(function (e) {
              return e.tick(x);
            }),
            x++ > 1440 &&
              ((x = 0),
              m.forEach(function (e) {
                return e.day();
              }));
          var e = Math.floor(x / 60),
            o = e > 7 && e < 19 ? "☀️" : "🌙";
          w.innerHTML =
            '<figure class="avatar avatar-sm" style="text-align: center; padding-top: 3px" >'
              .concat(o, "</figure>Time: ")
              .concat(("" + e).padStart(2, "0"), ":")
              .concat(("" + Math.floor(x % 60)).padStart(2, "0"));
        }
      }, 1),
      (function e() {
        window.requestAnimationFrame(function () {
          b-- < 0 &&
            (m.forEach(function (e) {
              return e.render();
            }),
            (b = p)),
            e();
        });
      })();
  },
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
